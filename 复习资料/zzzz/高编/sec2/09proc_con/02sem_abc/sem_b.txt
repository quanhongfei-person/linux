#include<stdio.h>
#include<unistd.h>
#include <sys/ipc.h>
       #include <sys/shm.h>
#include<stdlib.h>
#include <sys/sem.h>
union semun {
	int              val;    /* Value for SETVAL */
	struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
	unsigned short  *array;  /* Array for GETALL, SETALL */
	struct seminfo  *__buf;  /* Buffer for IPC_INFO
								(Linux-specific) */
};


int init_sem(int semid,int inx,int init_val)
{
	union semun un;
	un.val = init_val;
	int ret = semctl(semid,inx,SETVAL,un);
	if(-1 == ret)
	{
		perror("sem init");
		exit(1);
	}

}
int sem_P(int semid,int inx)
{
	 struct sembuf buf;
	buf.sem_num = inx ;
	buf.sem_op = -1;
	buf.sem_flg = SEM_UNDO;
	int ret = semop(semid,&buf,1);
	if(-1 == ret)
	{
		perror("semop");
		exit(1);
	}
}
int sem_V(int semid,int inx)
{
	 struct sembuf buf;
	buf.sem_num = inx ;
	buf.sem_op = +1;
	buf.sem_flg = SEM_UNDO;
	int ret = semop(semid,&buf,1);
	if(-1 == ret)
	{
		perror("semop");
		exit(1);
	}
}
int main(int argc, const char *argv[])
{
	key_t key = ftok("./",'!');
	if(-1 == key)
	{
		perror("ftok");
		exit(1);
	}

	int semid = semget(key,3,IPC_CREAT|0666);
	if(-1 == semid)
	{
		perror("semget");
		exit(1);
	}

	int i =10;
/*
	init_sem(semid,0,1);//a
	init_sem(semid,1,0);//b
	init_sem(semid,2,0);//c
*/	
	while(i--)
	{
		sem_P(semid,1);
		printf("B");fflush(stdout);
		sem_V(semid,2);
		sleep(1);
	}
	
	

	

	return 0;
}
