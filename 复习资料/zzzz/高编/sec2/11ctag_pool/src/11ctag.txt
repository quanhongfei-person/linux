/*
 ============================================================================
 Name        : 11ctag.c
 Author      : yas
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include<unistd.h>
#include<string.h>
#include<semaphore.h>
#include<pthread.h>
#include<dirent.h>
FILE*dst;
sem_t sem_task;
char LIST[100][256];
int List_Index = 0;

void do_process(char* pathname)
{

	DIR* dir = opendir(pathname);
	if (NULL == dir)
	{
		fprintf(stderr, "do_process opendir %s\n", pathname);
		perror(" do_process opendir");
		exit(1);
	}
	struct dirent* info;
	while (info = readdir(dir))
	{

		if (info->d_type == DT_DIR)
		{

			if (info->d_name[0] == '.')
				continue;
			char path[256] = { 0 };
			sprintf(path, "%s/%s", pathname, info->d_name);
			do_process(path);

		} else if (info->d_type == DT_REG)
		{
			int linenum = 1;
			char filename[256] = { 0 };
			sprintf(filename, "%s/%s", pathname, info->d_name);
			FILE*fp = fopen(filename, "r");
			if (NULL == fp)
			{
				fprintf(stderr, "do_process fopen %s\n", filename);
				perror("fopen");
				exit(1);
			}
			while (1)
			{
				char buf[1024] = { 0 };

				if (!fgets(buf, 1024, fp))
					break;

				if (strstr(buf, "#define"))
				{ // /usr/include/a.h  linenum #definexxxxxxxxx
					fprintf(dst, "/usr/include/%s %d %s", info->d_name, linenum,
							buf);
					fflush(dst);
				}
				linenum++;
			}
			fclose(fp);

		}

	}
	closedir(dir);

}
void* th(void* arg)
{
	while (1)
	{
		sem_wait(&sem_task);
		char pathname[256] = { 0 };
		int i = List_Index++;
		strcpy(pathname, LIST[i]);
		printf("in th pathname is %s LIST[%d]  %s \n",pathname,i, LIST[i]);
		do_process(pathname);

	}
	return NULL;
}

int main(void)
{
	 dst = fopen("mytags", "w");
	if (NULL == dst)
	{
		fprintf(stderr, "fopen mytags");
		perror("open mytags w");
		exit(1);
	}
	int i = 0;
	pthread_t tid[3] = { 0 };
	for (i = 0; i < 3; i++)
	{

		pthread_create(&tid[i], NULL, th, NULL);

	}

	DIR* dir = opendir("/usr/include");
	if (NULL == dir)
	{

		perror(" main opendir");
		exit(1);
	}
	struct dirent* info;
	i =0;
	while (info = readdir(dir))
	{

		if (info->d_type == DT_DIR)
		{

			if (info->d_name[0] == '.')
				continue;
			char path[256] = { 0 };
			sprintf(path, "/usr/include/%s", info->d_name);
			strcpy(LIST[i++], path);
			sem_post(&sem_task);

		} else if (info->d_type == DT_REG)
		{
			int linenum = 1;
			char filename[256] = { 0 };
			sprintf(filename, "/usr/include/%s", info->d_name);
			FILE*fp = fopen(filename, "r");
			if (NULL == fp)
			{
				fprintf(stderr, "main fopen %s\n", filename);
				perror("fopen");
				exit(1);
			}
			while (1)
			{
				char buf[1024] = { 0 };

				if (!fgets(buf, 1024, fp))
					break;
				if (strstr(buf, "#define"))
				{ // /usr/include/a.h  linenum #definexxxxxxxxx
					fprintf(dst, "/usr/include/%s %d %s", info->d_name, linenum,
							buf);
					fflush(dst);
				}
				linenum++;
			}
			fclose(fp);

		}

	}
	closedir(dir);
	pthread_join(tid[0], NULL);
	pthread_join(tid[1], NULL);
	pthread_join(tid[2], NULL);
	puts("!!!done!!!"); /* prints !!!done!!! */
	return EXIT_SUCCESS;
}
