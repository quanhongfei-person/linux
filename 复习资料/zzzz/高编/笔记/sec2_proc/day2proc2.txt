父子进程的关系：
	子进程是父进程的副本。子进程获得父进程数据段，堆，栈，正文段共享。
	
	在fork之后，一般情况那个会先运行，是不确定的。如果非要确定那个要先运行，需要IPC机制。
	
	区别：
	1）fork的返回值
	2）pid不同


命令行的参数，
	int main（int argc, char*argv[],char*env[]）
	getenv,setenv,
进程的终止：8中情况
	1）main 中return
	2）exit()， c库函数，会执行io库的清理工作，关闭所有的流，以及所有打开的文件。已经清理函数（atexit函数是一个特殊的函数，它是在正常程序退出时调用的函数，我们把他叫为登记函数（函数原型：int atexit (void (*)(void))））。
	3）_exit,_Exit 会关闭所有的已经打开的文件，不执行清理函数。
	4)主线程退出
	5）主线程调用pthread_exit
	异常终止
	6）abort()
	7）signal   kill pid
	8)最后一个线程被pthread_cancle
	
	
	

		

		
	2.进程的退出
	
	僵尸进程和孤儿进程
	
	僵尸进程:进程执行结束但空间未被回收变成僵尸进程

	1.exit     库函数
	退出状态，终止的进程会通知父进程，自己使如何终止的。如果是正常结束（终止），
	则由exit传入的参数。如果是异常终止，则有内核通知异常终止原因的状态。任何情况下，
	父进程都能使用wait，waitpid获得这个状态，以及资源的回收。
	void exit(int status) 
	exit(1);
	功能:
		让进程退出,并刷新缓存区
	参数：
		status:进程退出的状态
	返回值:
		缺省
	
	EXIT_SUCCESS	0
	EXIT_FAILURE	1

	return  当该关键字出现在main函数中时候可以结束进程
			如果在其他函数中则表示结束该函数。
	exit -> 刷新缓存区 -> atexit注册的退出函数 -> _exit
	
	2._exit    系统调用
	void _exit(int status);
	功能:
		让进程退出,不刷新缓存区
	参数:
		status:进程退出状态
	返回值:
		缺省

	
			  	
	
	
	3.atexit
	int atexit(void (*function)(void));
	功能:
		注册进程退出前执行的函数
	参数:
		function:函数指针
			指向void返回值void参数的函数指针
	返回值:
		成功返回0
		失败返回非0

	当程序调用exit或者由main函数执行return时,所有用atexit
	注册的退出函数,将会由注册时顺序倒序被调用

3.进程空间的回收
	
wait/waitpid

	pid_t wait(int *status);
功能：该函数可以阻塞等待任意子进程退出
      并回收该进程的状态。
	  一般用于父进程回收子进程状态。

参数：status 进程退出时候的状态
	  如果不关心其退出状态一般用NULL表示
	  如果要回收进程退出状态，则用WEXITSTATUS回收。（w exit status）

返回值：成功 回收的子进程pid
		失败 -1；
		
WIFEXITED(status)  是不是正常结束
   
WEXITSTATUS(status) 使用这个宏去那返回值

WIFSIGNALED(status) 是不是收到了信号而终止的
              
WTERMSIG(status)如果是信号终止的，那么是几号信号。


练习：
	设计多进程测试程序，完成字符和字符串作为
	exit返回的状态，查看是否能完成资源与数据
	的回收。

pid_t wait(int *status);

	1）如果所有的子进程都在运行，则阻塞
	2）如果一个子进程终止，正在等待的父进程则获得终止状态，获得子进程的状态后，立刻返回。
	3）如果没有子进程，则立即出错退出。

	
	pid_t waitpid(pid_t pid, int *status, int options);
	< -1 回收指定进程组内的任意子进程
	-1 回收任意子进程，组内外
	0 回收和当前调用waitpid一个组的所有子进程，组内
	> 0 回收指定ID的子进程
	 waitpid (-1,a,0)  == wait(a);
	 status 子进程退出时候的状态，
	  		如果不关注退出状态用NULL；
	  options 选项：
	  			0  表示回收过程会阻塞等待
				WNOHANG 表示非阻塞模式回收资源。
	返回值：成功 返回接收资源的子进程pid
		失败  -1
		0,

	
	练习：
	设计一个多进程程序，用waitpid函数指定回收
	其中的某个进程资源并将其状态打印输出。
	其他的进程都以非阻塞方式进行资源回收。
	

exec

execute
exec族
用fork创建子进程后执行的是和父进程相同的程序（但有可能执行不同的代码分支），
子进程往往要调用一种exec函数以执行另一个程序。当进程调用一种exec函数时，该进程的
用户空间代码和数据完全被新程序替换，从新程序的启动例程开始执行。调用exec并不创建
新进程，所以调用exec前后该进程的id并未改变。
其实有六种以exec开头的函数，统称exec函数：

ls -l -i list 
execl("/bin/ls","-l","-i",NULL);
execlp("ls","-l","-i",NULL);
#include <unistd.h>
int execl(const char *path, const char *arg, ...);
int execv(const char *path, char *const argv[]);

key=value
int execle(const char *path, const char *arg, ..., char *const envp[]);
int execle(const char *path, const char *arg, ..., char *const envp[]);

int execve(const char*path,char*const argv[],char*const evnp[]);
int execlp(const char *file, const char *arg, ...);
echo $PATH
PATH= 
int execvp(const char *file, char *const argv[]);


int execve(const char *path, char *const argv[], char *const envp[]);

这些函数的区别
	1），前4个使用路径名作为参数，后面两个使用文件名做参数
	当filename中，含有/时视为路径名，否则就按PATH变量，在指定目录下查找可执行文件。
	2）相关的参数表传递
	l表示list，v表示vector
	execl,execlp,execle,需要将参数一个一个列出，并以NULL结尾。
	execv，execvp，execve，需要构造一个参数指针数组，然后将数组的地址传入。

	3）以e结尾的函数，可以传入一个指向环境字符串的指针数组的指针。其他未指定环境变量，使用父进程继承过来的。
execve 是真正的系统调用
这些函数如果调用成功则加载新的程序从启动代码开始执行，不再返回，如果调用出错
则返回-1，所以exec函数只有出错的返回值而没有成功的返回值。



char *const ps_argv[] ={"ps", "-o", "pid,ppid,pgrp,session,tpgid,comm", NULL};
char *const ps_envp[] ={"PATH=/bin:/usr/bin", "TERM=console", NULL};
execl("/bin/ps", "ps", "-o", "pid,ppid,pgrp,session,tpgid,comm", NULL);
execv("/bin/ps", ps_argv);
execle("/bin/ps", "ps", "-o", "pid,ppid,pgrp,session,tpgid,comm", NULL, ps_envp);
execve("/bin/ps", ps_argv, ps_envp);
execlp("ps", "ps", "-o", "pid,ppid,pgrp,session,tpgid,comm", NULL);
execvp("ps", ps_argv);


#include <unistd.h>
#include <stdlib.h>
int main(void)
{
	execlp("ps", "ps", "-o", "pid,ppid,pgrp,session,tpgid,comm", NULL);
	perror("exec ps");
	exit(1);
}

char* getenv(char* envname)
getenv(TERM)    xterm

功能：获得环境变量的值
参数：需要获得环境变量的名字
返回：对应环境变量的值
	NULL：失败
PATH=fjalsjdlf;ajsdfjlkasjdlkflkajsdlkf;
int setenv(char*envname,char*value,int option);

setenv(TERM,xterm,1)
功能：设置相应的环境变量
参数：
envname：环境变量的值
value：设置相应的环境变量的值
option：0 将不改变变量的内容
		1，覆盖原变量的内容；
返回 ：
		1，成功
		0 失败

练习：
	1、设计一个自己的输出程序，可以任意输出一行语句。
	在main.c中分别调用fork方式调用自己的程序，并
	将语句输出到屏幕。


	ps -eo pid,ppid,,stat,comm
	2、测试ps命令是否可以用execlp/execvp形式带参数启动。
	3、自己编写一个程序，如何用execlp/execvp方式启动。


作业：
	设计含有两个进程的多进程程序，完成如下功能：
	父进程获取用户输入信息，并写入文件
	子进程读取文件并打印输出。
	当输入quit的是双方退出。
	整个过程不能产生僵尸进程和孤儿进程。
	
	
	int system(const char *command); fork+exec 
	功能：使用该函数可以将shell命令直接在代码中执行。
	参数：command要执行的shell命令
	返回值：成功 0
			失败 -1
			
			main()
			{
				system("firefox www.baidu.com");
				printf("哈哈\n");
			}
			int system()
			{
				fork();
				>0
				
				{}
				0==pid
				{
				exec
				}
			}
daemon 守护进程


	特征：没有界面  后台执行  长期执行   .bashrc
	应用：服务器后台程序  log backup

守护进程程序编写框架 ==》5 步骤

1、创建孤儿进程 ==》fork 父进程退出，子进程保留

	fork()
	exit() ===>父进程

2、创建会话组组长 ===>独立
	setsid()===>   pid_t setsid(void);
	功能：将当前进程脱离终端控制变为会话组组长权限。
	参数：无
	返回值：成功 返回当前会话组组长pid
			失败  -1；
	  
3、修改工作目录 ===》不被卸载
	chdir("/");
	chdir() ===int chdir(const char *path);
	功能：修改当前工作进程的工作目录。
	参数：path 要修改到的目的工作目录。
	返回值：成功 0
			失败 -1；

4、修改权限掩码 ===》 提权
	umask(0)
	#include <sys/types.h>
	#include <sys/stat.h>

	mode_t umask(mode_t mask);
	功能：修改当前环境下的文件权限掩码
	参数：mask 要修改的目标掩码,在守护进程
		  中该值为 0，表示目标权限全部放开。
	返回值:成功  修改之后的文件权限掩码
		   失败 -1；

5、关闭文件描述符===>清理文件 0 1 2
	close() ==》getdtablesize() 1024
	int getdtablesize(void);
	功能：获取当前进程已经打开的最大文件描绘符。
	参数：无
	返回值：成功 最大描述符
			失败 -1；

6、验证是否是一个守护进程

	6.1  ps aux  ==>STAT 列 ===》会话组长 Ss
	6.2  ps aux  ==>TTY  列 =？  ==》表示没有终端关联
	6.3  ps -ef  ==>ppid =1 ===>孤儿进程
	ps -eo pid,ppid,stat,tty,comm
	必须满足以上三个要求，则为守护进程.

练习：
1、	设计一个守护进程，默认读取同名配置文件。
	根据配置文件的内容，启动相关程序，并将
	daemon.cfg
	ls /etc/ -l 
	ps aux 
	cp /etc/passwd ./ 
	daemon.log
	2017-8-17 13:39:23 ls 
	2017-8-17 13:29:30 ps
	2017-8-17 13:29:30 cp 
	启动过程信息(时间,pid) 写入同名日志文件。
	
	2017-11-5 17:00:20 当前进程数是？
	
	

2、设计一个多进程程序，进程个数不限，完成如下功能
   将一个大文件用多进程分割为个数相同的子文件
   每个子文件最后可以合并成原始文件。

3、梳理IO-多进程知识点，列出知识大纲图。
   每人找出不少于3个的问题。