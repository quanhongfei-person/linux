#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <sqlite3.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <time.h>
#include <sys/socket.h>
#include <sys/epoll.h>

char wangye[4096];
char *xinxi;
int a;

unsigned char ToHex(unsigned char x)
{
	return x>9? x+55: x+48;
}
unsigned char FromHex(unsigned char x)
{
	if(0 == x ) return -1;
	unsigned char y;
	if(x>='A' &&x<='Z') y = x-'A'+10;
	else if(x>='a' &&x <='z') y = x-'a'+10;
	else if(x>='0' && x<='9') y = x-'0';

	return y;
}

int  urlDecode(  char* dest, const char* src)
{
	if(NULL ==src || NULL == dest)
	{
		return -1;

	}
	int len = strlen(src);
	int i =0 ;
	for(i = 0 ;i<len;i++)
	{

		if('+' == src[i]) strcat(dest,"");
		else if('%'==src[i])
		{
			//if(i+2len)return -1;
			unsigned char high = FromHex((unsigned char)src[++i]);
			unsigned char low = FromHex((unsigned char)src[++i]);
			unsigned char temp = high*16 +low;
			char temp2[5]={0};
			sprintf(temp2,"%c",temp);
			strcat(dest , temp2);
		}
	}
	return 0;
}
// 多路io  epoll  将listfd， conn 加入到epfd集合中 
int add_fd(int epfd, int fd)
{
	struct epoll_event ev;
	ev.events = EPOLLIN;
	ev.data.fd = fd;
	int Ret = epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &ev);
	if (-1 == Ret)
	{
		perror("fail to epoll_ctl");
		return -1;
	}
	return 0;
}
//删除listfd， conn
int del_fd(int epfd, int fd)
{
	struct epoll_event ev;
	ev.events = EPOLLIN;
	ev.data.fd = fd;
	int Ret = epoll_ctl(epfd, EPOLL_CTL_DEL, fd, &ev);
	if (-1 == Ret)
	{
		perror("fail to epoll_ctl");
		return -1;
	}
	return 0;
}
//发送响应报文头及响应报文， 你懂滴！
int sendfile(char *filename, char *filetype, int conn)
{
	int fd = 0;
	int Ret = 0;
	struct stat st;
	stat(filename, &st);
	char file_buf[4096] = {0};
	char http_head[1024] = {0};
	sprintf(http_head, "HTTP/1.1 200 OK\r\nSrver: Apache/2.2.22 (Ubuntu)\r\nAccept-Ranges: bytes\r\nContent-Length: %ld\r\nContent-Type: %s\r\n\r\n",
						st.st_size,filetype);
	write(conn, http_head, strlen(http_head));
	//printf("%s", http_head);
	fd = open(filename, O_RDONLY);
	if (-1 == fd)
	{
		perror("fail to open");
		return -1;
	}
	while (1)
	{
		Ret = read(fd, file_buf, 4096);
		if (Ret <= 0)
		{
			break;
		}
		write(conn, file_buf, Ret);
	}
	close(fd);

	return 0;
}


int select_handle2(void *arg, int num, char *result[], char *title[])
{
	 printf("%s, %s, %s, %s, %s\n", result[0], result[1], result[2], result[3], result[4]);
	sprintf(xinxi, "%s<!DOCTYPE html> <html><head><meta charset=\"utf-8\"><title>手机信息</title></head> <body background='/3.jpg'><body><table><tr><td>", xinxi);
	sprintf(xinxi, "%s<img src=\"/./%s\"><h2 align='right'>%s<h2></td><td><h3 align='right'><u><del>%s</del>%s</u><h3><h2 align='right'>%s<h2>%s</td></tr></table></body></html>", xinxi, result[0], result[1], result[2], result[3], result[4], result[5]);
	*(int *)arg = 1;
	return 0;
}
//查找手机， 存在flag置1， result[0]是手机图片 result[1]是手机名
int select_handle1(void *arg, int num, char *result[], char *title[])
{	
	char Tmp[64] = {0};
	char Tmp1[64] = {0};
	char TuPian[1024] = {0};
	char lianjie[256] = {0}; 
	strncpy(lianjie, result[0], strlen(result[0])-4);
	sprintf(lianjie, "%s101010", lianjie);

	a = a+1;
	strcpy(Tmp, result[0]);
	strcpy(Tmp1, result[1]);
	printf("%d:%s, %s\n",a, result[0], result[1]);
//这个a是为了图片多的话放成两行 能看懂就看，不懂来了再说	
	if (a == 5)
	{
//拼接所需图片超链接
		sprintf(TuPian, "<tr><td><a href=\"%s\"><img src=\"./%s\"></a><h4>%s<h4></td>", lianjie, Tmp, Tmp1);
	}
	else
	{
		sprintf(TuPian, "<td><a href=\"%s\"><img src=\"./%s\"></a><h4>%s<h4></td>", lianjie, Tmp, Tmp1);
	}
//将拼接好的图片超链接拼在字符串wangye中间， char wangye[4096] = 第三网页头+图片超链接+网页尾；
	sprintf(wangye, "%s%s", wangye, TuPian);
	*(int *)arg = 1;
	return 0;
}

//用户登录， 成功flag置1
int select_handle(void *arg, int num, char *result[], char *title[])
{
	*(int *)arg = 1;
	

	return 0;
}

int main(int argc, const char *argv[])
{
	int listfd = 0;
	int conn = 0;
	int Ret = 0;
	int epfd = 0;

	sqlite3 *db;
	struct sockaddr_in SerAddr;
	struct sockaddr_in CliAddr;
	struct epoll_event revent[100];
	bzero(&SerAddr, sizeof(SerAddr));
	bzero(&CliAddr, sizeof(CliAddr));
	xinxi = malloc(1024*32);

	SerAddr.sin_family = AF_INET;
	SerAddr.sin_port = htons(8000);
	SerAddr.sin_addr.s_addr = INADDR_ANY;
//创建套接字
	listfd = socket(AF_INET, SOCK_STREAM, 0);
	if (-1 == listfd)
	{
		perror("fail to socket");
		return -1;
	}
//绑定ip地址和网口号
	Ret = bind(listfd, (struct sockaddr *)&SerAddr, sizeof(SerAddr));
	if (-1 == Ret)
	{
		perror("fail to bind");
//发送第四页面还没写完 比较难懂 当面说吧！
		return -1;
	}
//设置最大监听数： 3
	Ret = listen(listfd, 3);
	if (-1 == Ret)
	{
		perror("fail to listen");
		return -1;
	}
	socklen_t len = sizeof(CliAddr);
//创建多路io epoll_create;
	epfd =  epoll_create(100);
	if (-1 == Ret)
	{
		perror("fail to epoll_create");
		return -1;
	}
//添加 listfd 到epfd
	add_fd(epfd, listfd);
	while (1)
	{
		int i = 0;
//等待 epfd的事件；是listfd就建立连接， 是conn就创建通信
		Ret = epoll_wait(epfd, revent, 100, -1);
		for (i = 0; i < Ret; i++)
		{
			if (revent[i].data.fd == listfd)
			{
				conn = accept(listfd, (struct sockaddr *)&CliAddr, &len);
				if (-1 == conn)
				{
					perror("fail to accept");
					return -1;
				}

				printf("对方的ip是%s, 端口是%d\n",inet_ntoa(CliAddr.sin_addr),ntohs(CliAddr.sin_port));
//添加 conn 到epfd		
				add_fd(epfd, conn);
			}
			else
			{
				char *head = NULL;	
//发送第四页面还没写完 比较难懂 当面说吧！
				char recv_buf[4096] = {0};
				char *method = NULL;
				char *url = NULL;
				char *version = NULL;
				int Ret1 = read(revent[i].data.fd,recv_buf, 4096);
				printf("recv:%s", recv_buf);
//截出 url			
				head = strtok(recv_buf, "\r\n");
				method = strtok(head, " ");
				url = strtok(NULL, " ");
				version = strtok(NULL, "\0");
//第一次请求， 发送用户登录界面；
				if (0 == strcmp(url, "/"))
				{
					sendfile("denglu.html", "text/html", revent[i].data.fd);
				}
				if (0 == strcmp(url, "/xinxi5.html"))
				{
					sendfile("xinxi5.html", "text/html", revent[i].data.fd);				
				}
//如果请求图片， 把url里的/去掉再发送出去 例：url=/3.jpg 则Tmp=3.jpg		
				if (strstr(url, ".jpg"))
				{
					char Tmp[256] = {0};
					char *p = NULL;
					p = Tmp;
					while (*url != '\0')
					{
						*p = *(url+1);
						url++;
						p++;
					}
					sendfile(Tmp, "image/jpeg", revent[i].data.fd);
				}
//如果是url=login？sousuo=***, 则拼接一个html文件发送搜到的结果；
				if (strstr(url, "sousuo="))
				{

					char *name2 = NULL;
					int flag = 0;
					char sql_cmd1[256] = {0};
					char *errmsg = NULL; 

					int Ret = sqlite3_open("123.db", &db);
					if (Ret != SQLITE_OK)
					{
						fprintf(stderr, "open db :%s\n", sqlite3_errmsg(db));
						sqlite3_close(db);
						exit(1);
					}
//截取搜索的name，例：name2=诺基亚
					strtok(url, "=");
					name2 = strtok(NULL, "\0");
					char china[64]={0};
					urlDecode(china,name2);
					printf("%s,%s\n",china, name2);
				//	sprintf(sql_cmd1, "select goods_desc,goods_thumb from goods where goods_name like '%s%%';", name2);

				//	strcpy(wangye, "<!DOCTYPE html> <html>	<head><meta charset=\"utf-8\"><title>搜索结果</title></head><body background='15.jpg'><br><br><br><br><br><p align='center'><tr>");
//第三网页的头copy到全局变量字符串wangye中
					strcpy(wangye, "<!DOCTYPE html> <html>	<head><meta charset=\"utf-8\"><title>搜索结果</title></head><body background='15.jpg'><p align='center'><br><br><br><br><br><table><tr>");
//拼接并用sqlite3_exec执行查找语句sql_cmd1,如果数据库里存在查找的数据， 则执行回调函数select_handle1，并将flag置1；
					sprintf(sql_cmd1, "select goods_img, goods_name,market_price, shop_price, keywords, goods_desc from goods where goods_name like '%s%%';", china);
					Ret = sqlite3_exec(db, sql_cmd1, select_handle1, &flag, &errmsg);
					if (Ret = SQLITE_OK)
					{
						fprintf(stderr, "exec sql %s:%s\n", sql_cmd1, errmsg);
						sqlite3_free(errmsg);
						sqlite3_close(db);
						exit(1);
					}
//第三网页的尾拼接到wangye最后
					sprintf(wangye, "%s</tr></table></p></body></html>", wangye);
					if (flag == 1)
					{	
//打开文件jieguo.html， 讲字符串wangye里的东西写入文件中 发送给客户端
						int fd = open("jieguo.html", O_WRONLY|O_CREAT|O_TRUNC,0664);
						if (-1 == fd)
						{
							perror("fail to open");
							return -1;
						}
					    write(fd, wangye, strlen(wangye));
				
						close(fd);
						sendfile("jieguo.html", "text/html", revent[i].data.fd);
					}
					else
					{
//失败发送failure.html
						sendfile("failure.html", "text/html", revent[i].data.fd);
					}
					sqlite3_close(db);
				//	sendfile("shouji.html", "text/html", revent[i].data.fd);
				}
				if (strstr(url, "101010"))
				{
					int flag = 0;
					char picture[256] = {0};
					char picture2[256] = {0};
					char sql_cmd2[256] = {0};
					char picture3[256] = {0};
					char *q = NULL;
					char *p = NULL;
					char *errmsg = NULL; 

					p = picture;
					q = picture3;
					printf("%s\n", url);
					strncpy(p, url, strlen(url)-6);
					printf("%s\n", picture);
					while (*p != '\0')
					{
						*q = *(p+1);
						q++;
						p++;
					}
					printf("picture3:%s\n", picture3);

					sprintf(picture3, "%s.jpg", picture3);
			//		sprintf(picture2, "./%s.jpg", picture3);

					printf("----------------------\n");
					sprintf(sql_cmd2, "select goods_img, goods_name,market_price, shop_price, keywords, goods_desc from goods where goods_img = '%s';", picture3);
					int Ret = sqlite3_open("123.db", &db);
					if (Ret != SQLITE_OK)
					{
						fprintf(stderr, "open db :%s\n", sqlite3_errmsg(db));
						sqlite3_close(db);
						exit(1);
					}
					Ret = sqlite3_exec(db, sql_cmd2, select_handle2, &flag, &errmsg);
					if (Ret = SQLITE_OK)
					{
						fprintf(stderr, "exec sql %s:%s\n", sql_cmd2, errmsg);
						sqlite3_free(errmsg);
						sqlite3_close(db);
						exit(1);
					}
					if (flag == 1)
					{	
						int fd = open("xinxi5.html", O_WRONLY|O_CREAT|O_TRUNC,0664);
						if (-1 == fd)
						{
							perror("fail to open xinxi5");
							return -1;
						}
					    write(fd, xinxi, strlen(xinxi));
						bzero(xinxi, 1024*32);
				
						close(fd);
						sendfile("xinxi5.html", "text/html", revent[i].data.fd);
					}
					else
					{
						sendfile("failure.html", "text/html", revent[i].data.fd);
					}
					sqlite3_close(db);



#if 0
					int flag = 0;
					char picture[256] = {0};
					char picture2[256] = {0};
					char sql_cmd2[256] = {0};	
					char *errmsg = NULL; 

					printf("%s\n", url);
					strncpy(picture, url, strlen(url)-6);
					printf("%s\n", picture);
					sprintf(picture, "%s.jpg", picture);
					sprintf(picture2, "./%s.jpg", picture);

					printf("%s\n", picture);
					printf("----------------------\n");
					sprintf(sql_cmd2, "select goods_img, goods_name,market_price, shop_price, keywords, goods_desc from goods where goods_img = '%s';", picture2);
					int Ret = sqlite3_open("123.db", &db);
					if (Ret != SQLITE_OK)
					{
						fprintf(stderr, "open db :%s\n", sqlite3_errmsg(db));
						sqlite3_close(db);
						exit(1);
					}
					Ret = sqlite3_exec(db, sql_cmd2, select_handle2, &flag, &errmsg);
					if (Ret = SQLITE_OK)
					{
						fprintf(stderr, "exec sql %s:%s\n", sql_cmd2, errmsg);
						sqlite3_free(errmsg);
						sqlite3_close(db);
						exit(1);
					}
					if (flag == 1)
					{	
					//	int fd = open("xinxi5.html", O_WRONLY|O_CREAT|O_TRUNC,0664);
					//	if (-1 == fd)
					//	{
					//		perror("fail to open");
					//		return -1;
					//	}
					 //   write(fd, xinxi, 4096);
				
					//	close(fd);
						sendfile("xinxi1.html", "text/html", revent[i].data.fd);
					}
					else
					{
						sendfile("failure.html", "text/html", revent[i].data.fd);
					}
					sqlite3_close(db);
#endif
				}

//用户登录；url中存在name= 就是用户登录
				if (strstr(url, "name="))
				{
					char *name1 = NULL;
					char *pass1 = NULL;
					int flag = 0;
					int Ret = sqlite3_open("yonghu.db", &db);
					if (Ret != SQLITE_OK)
					{
						fprintf(stderr, "open db :%s\n", sqlite3_errmsg(db));
						sqlite3_close(db);
						exit(1);
					}
//截取username password					
					strtok(url, "=");
					name1 = strtok(NULL, "&");
					strtok(NULL, "=");
					pass1 = strtok(NULL, "\0");
					char sql_cmd[256] = {0};
					char *errmsg = NULL;
//拼接sql_cmd语句并用sqlite3_exec执行， 成功执行回调函数 flag置1
					sprintf(sql_cmd, "select * from yonghu where name = '%s' and pass = '%s';", name1, pass1);
					
					Ret = sqlite3_exec(db, sql_cmd, select_handle, &flag, &errmsg);
					if (Ret = SQLITE_OK)
					{
						fprintf(stderr, "exec sql %s:%s\n", sql_cmd, errmsg);
						sqlite3_free(errmsg);
						sqlite3_close(db);
						exit(1);
					}
					if (flag == 1)
					{
						sendfile("chazhao.html", "text/html", revent[i].data.fd);
					}
					else
					{
						sendfile("failure.html", "text/html", revent[i].data.fd);
					}
					sqlite3_close(db);
				}
				
					del_fd(epfd, revent[i].data.fd);
					close(revent[i].data.fd);
			}
		}
	}
	free(xinxi);	
	close(listfd);

	return 0;
}
