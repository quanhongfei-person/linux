linux、unix都是elf
bootloader（uboot， u-boot.bin）

kernel    （linux3.5）   驱动（open）

rootfs    （busybox工程：嵌入式linux指令）
-------------------------------------------------
	应用程序

soc（系统级芯片，也有称片上系统）== cpu+功能电路   arm+samsung

开发平台：exynos4412

计算机处理器：
							冯诺依曼体系    数据总线和地址总线分时复用
							哈佛体系        数据总线和地址总线独立

		复杂指令集体系
			复杂指令集，也称为CISC指令集，英文名是CISC，(Complex Instruction Set Computing的缩写)。
			在CISC微处理器中，程序的各条指令是按顺序串行执行的，每条指令中的各个操作也是按顺序串行执行的。
			顺序执行的优点是控制简单，但计算机各部分的利用率不高，执行速度慢。其实它是英特尔生产的x86系列(也就是IA-32架构)CPU及其兼容CPU，如AMD、VIA的。
			即使是现在新起的X86-64(也被称为AMD64)都是属于CISC的范畴。
		
		精简指令集
			RISC的英文全称是Reduced Instruction Set Computer，中文是精简指令集计算机。
			特点是所有指令的格式都是一致的，所有指令的指令周期也是相同的，并且采用流水线技术。
			在中高档服务器中采用RISC指令的CPU主要有Compaq(康柏，即新惠普)公司的Alpha、HP公司的PA-RISC、IBM公司的PowerPC、MIPS公司的MIPS和SUN公司的Sparc。
			
体系结构
arm架构：
		arm公司设计的精简指令集处理器架构
		armv1----armv8
		
		exynos4412 ==== armv7体系
		
		arm7
		arm9
		arm11
		
		cortex M  工业控制
		cortex R  实时性
		cortex A  消费电子（mpu）
		a7 a8  a9 a15 a35 a53 a72 a73 a75 a76
		
		寄存器，硬件操作接口
		cpu核心：ALU（算术逻辑单元）/寄存器/指令集/流水线
		
arm核心：
		1.寄存器比较多
		2.指令长度定长  32位
		3.寄存器都是    32位
		4.大部分指令单周期
		5.处理交互的数据只能来自寄存器，不能直接来自内存

arm支持 大小端   默认小端
arm支持的数据类型
	8位  字节
	16位 半字
	32位 字
	64位 双字
32位arm最大寻址空间4G  0 ----  (4G-1)
 
 arm的寄存器：
 		只识别名字
 		通用：
 			r0-r15
 					r0-r12   
 					sp(r13)  栈指针      函数调用时可以保存寄存器数值到sp指向的空间  
 					lr(r14)  链接寄存器  保存程序返回地址
 					pc(r15)  程序计数器 
 							写入：cpu跳转到写入地址处执行代码
 							读取：当前正在执行指令的下下条指令地址（预取指令地址）
 		功能:
			cpsr  当前程序状态寄存器
					N  31位   1表示结果为负数  0 表示正数
					Z  30位   1表示结果为 0    0 表示结果非零
					C  29位   加法运算  1表示存在进位 0 表示不存进位
										减法运算  1表示不存在借位 0表示存在借位    
					V  28位   1表示存在溢出  0表示不存在溢出
					以上只有cpu可以改变
					E  9位    1表示大端  0表示小端
					I  7位    irq使能控制位   1 irq禁止  0使能irq
					F  6位    Fiq（快速中断）使能控制位   1 Fiq禁止  0使能Fiq
					
					M[4:0]
					User usr 10000 
					FIQ fiq 10001 
					IRQ irq 10010 
					Supervisor svc 10011 
					Monitor mon 10110 
					Abort abt 10111 
					Hyp hyp 11010 
					Undefined und 11011 
					System sys 11111 	
				
			spsr  保存cpsr数值

	工作模式：
			7种工作模式  cortex_a9  9种  每种工作模式都有寄存器（公用和私有的）
			非特权：
			user    用户：大部分应用程序的工作模式
			特权：
			sys     系统：和user模式使用同一组寄存器的特权模式
			异常模式：
			Undefined mode  未定义模式： 未识别指令的工作模式
			Abort mode      中止模式：   预取失败，访问受保护空间时cpu的工作模式
			Supervisor mode  管理模式：  上电复位cpu的工作模式，软件中断cpu的工作模式
			IRQ mode         中断模式：  irq中断时cpu的工作模式   
			FIQ mode         快速中断：  fiq中断时cpu的工作模式
			
			Monitor mode  安全模式  
			Hyp mode      虚拟化模式
			
			
			异常发生时  cpu自动切换
			在特权模式（管理模式）  修改cpsr寄存器
			
arm的异常处理机制


			arm异常信号：7种
			复位异常           Supervisor mode    
			未定义异常         Undefined mode
			软件中断（svc）    Supervisor mode
			预取中止           Abort mode
			数据中止           Abort mode
			irq中断            IRQ mode
			fiq中断            FIQ mode
				
			当异常发生时，cpu会进行异常区分，自动跳转到异常向量表固定位置执行代码
      异常向量表：异常事件处理方法集合 
      异常向量表基地址：高位  0xffff0000
      									低位  0x00000000
      
      armv7 设置在任意位置
      
      
      arm协处理器  完成电路管理
      	16个协处理器 CP0-CP15
      	
      
arm有4的状态
		arm     arm指令 
		thumb   thumb指令
		thumbEE
		java字节码   
      
    thumb   指令  每条指令2个字节
      
   	虚拟地址：cpu发出的地址寻址
   	物理地址：半导体厂商对器件的线性排布地址
   	
   	
指令：汇编指令  机器码的助记符
			
		
		数据处理指令
		跳转指令
		内存操作指令
		块拷贝指令
		栈操作指令
		特殊寄存器操作指令 
		协处理器操作指令


		指令格式：
		mov 传输
		――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
		MOV{S}<c> <Rd>, #<const>
		{S} 指令可以被被写为movs 根据运算结果更改cpsr寄存器的NZCV
		<c>  指令可以条件执行 
		<Rd>目标寄存器
		#<const> 立即数   
		MOV{S}<c> <Rd>, <Rm>
		――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
		mov r0, #1   ==== r0 = 1
		mov r0, r1   ==== r0 = r1
		
		
		伪操作：代码的排布规则
		