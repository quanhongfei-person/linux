GCC的四步：

1、预处理阶段
    该阶段的作用是把预处理文件，也就是头文件编译进来。在此例中，就是要把stdio.h编译进来。
	可使用－E选项查看，作用是让gcc在预处理结束后停止编译过程。
	[armlinux@lqm program]$ gcc -E hello.c -o hello.i


2、编译阶段
    GCC的工作是首先检查代码的规范性、是否有语法错误，以确定代码实际要做的工作。
	检查无误后，将之翻译为汇编语言。可用－S来查看，即只编译而不进入汇编阶段。
	[armlinux@lqm program]$ gcc -S hello.i -o hello.s


3、汇编阶段
    GCC把编译生成的.s文件转换为目标文件.o。
	这时使用－c选项就可以看到汇编代码已经转换成.o的目标代码了。
	[armlinux@lqm program]$ gcc -c hello.s -o hello.o


4、链接阶段
	成功编译之后，就进入了链接阶段。这里首先要明白“库”的概念。
	这个程序中没有“printf”的函数实现，且在预处理阶段包含进来的“stdio.h”中只有该函数的声明，而没有定义函数的实现。如何实现“printf”？
	答案是：系统把这些函数的实现都做到名位libc.so.6的库文件里了，没有特别指定时，GCC会到默认的搜索路径“/usr/lib”下进行查找。
	也就是链接到libc.so.6库函数中去来实现函数“printf”，这就是链接的作用。
	
	
	
	
	
char *p[10]

“[“的优先级高于”*” 
意味着p是一个有十个元素的数组 
元素的类型是 char*

char (*p)[10]

“(“的优先级最高 
意味着p是一个指针 
指向一个有十个char元素的数组

char * const * (*next) ();

next是一个指针 
右接(),是一个函数指针 
左接*，函数的返回值是是一个指针 
这个指针指向一个char * const 
综上：next是一个函数指针，指向的函数的返回指也是一个指针，该指针指向一个类型为char的常量指针

char * (*c[10]) (int *p)

c是一个数组，其每个元素都是指针 
每个指针都指向一个函数 
函数的参数类型是int ，函数的返回类型是char 
综上：c是一个有十个元素的数组，元素类型是函数指针，其所指向的函数的返回的是一个指向char的指针
