上电：工作模式  管理模式
			PC = 0
			
   	
指令：汇编指令  机器码的助记符
			
		
		数据处理指令
		跳转指令
		内存操作指令
		块拷贝指令
		栈操作指令
		特殊寄存器操作指令 
		协处理器操作指令


		指令格式：
		mov 传输
		――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
		MOV{S}<c> <Rd>, #<const>
		{S} 指令可以被被写为movs 根据运算结果更改cpsr寄存器的NZCV
		<c>  指令可以条件执行 
		<Rd>目标寄存器
		#<const> 立即数   
		MOV{S}<c> <Rd>, <Rm>
		――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
		mov r0, #1   ==== r0 = 1
		mov r0, r1   ==== r0 = r1
		
		
		伪操作：代码的排布规则
			
汇编指令：
		SP 私有：
		lr
		cpsr  当前程序状态寄存器
		spsr  当模式切换时保存cpsr，当模式恢复时恢复cpsr

伪指令：
		nop  空操作
		ldr  r0, =0x12345678   //可以将任意32位数传递到目标寄存器
		ldr r0, =fun  将fun的链接地址给r0
		adr r0, fun   将fun的地址给r0  （基于当前pc前后）
		ADRL r0, fun
		
		
				
	指令：
		mov 
		mov r0, #3   
		mov r1, r3
	
立即数：
		必须 以 #开始
				必须是一个8位以内的数，经过循环右移或循环左移偶数位形成的数值
				
	
数据处理指令

	传输指令
		mvn  取反传输
		MVN{S}<c> <Rd>, #<const> 
		mvns 根据运算结果更改cpsr寄存器的的nzcv
		mvn  r0, #0  === r0 = ~0
		mvn  r0, r1  === r0 = ~r1
	
		i = i - 10;
		i -=  10;
		
		如果目标寄存器和第一操作数是同一个寄存器，则可以省略
	运算指令
		add 加法指令
		add  r0, r1, #3   === r0 = r1 + 3
		add  r0, r1, r2   === r0 = r1 + r2
		sub  减法指令
			sub  r0, r1, #3 === r0 = r1-3
			sub  r0, r1, r2 === r0 = r1-r2
			sub r0, r0, #3
			sub r0,  #3   === r = r0-3
		rsb  反减
			rsb r0, r1, #3  ===  r0 = 3-r1
			rsb r0, r1, r2  ===  r0 = r2-r1
		mul
			mul r0, r1, r2  === r0 = r1*r2
			
		
		64位数据运算（高32位运算）
		adc  带进位加法
			adc r0, r1, r2   === r0 = r1+r2+C

		sbc  带借位减法
			sbc r0, r1, r2   === r0 = r1-r2-!C
			
			64位运算：
				adds
				adc
				
				subs
				sbc
				
	移位操作
		MVN{S}<c> <Rd>, <Rm>{, <shift>}
		<Rm>{, <shift>}  表示  <Rm>先进行移位操作，后参与mvn的运算
				LSL #<n>  
				LSR #<n>
				ASR #<n>
				ROR #<n>
			mvn r0, r1, lsl #3
		
		lsl 逻辑左移   高位丢失，低位补0
			lsl r0, r1, #3   === r0 = r1<<3
			lsl r0, r1, r2   === r0 = r1<<r2
		lsr 逻辑右移   低位丢失，高位补0
			lsr r0, r1, #3   === r0 = r1>>3
			lsr r0, r1, r2   === r0 = r1>>r2
		asr 算术右移   移位操作按照逻辑右移，符号位不变，空位补符号位

		ror  循环右移， 低位移动到高位
			
	位操作
	
		and  按位与
				and r0, r1, #3   === r0= r1&3
				and r0, r1, r2   === r0= r1&r2   可以进行清0操作， 可以进行判断
		orr 按位或
				orr r0, r1, #3   === r0= r1|3
				orr r0, r1, r2   === r0= r1|r2   可以实现置位操作
		eor 按位异或
				eor r0, r1, #3   === r0= r1^3
				eor r0, r1, r2   === r0= r1^r2   判断相等
		bic 位清除  清除第一操作数中，第二操作数中为1的那些位
				bic r0, r1, #1   === r0 = r1 & ~(1)
				bic r0, r1, r2   === r0 = r1 & ~(r2)
		
		
		条件码：
				ne  判断不等
				eq  判断相等
				le  小于等于
				lt  小于
				gt  大于
				ge  大于等与
	比较指令
			cmp  比较    所有条件
				cmp r0, #3   利用r0-3的结果修改CPSR寄存器的NZCV
				cmp r0, r1   利用r0-r1的结果修改CPSR寄存器的NZCV
			cmn  负数比较 
				cmn r0, #3   利用r0+3的结果修改CPSR寄存器的NZCV
				cmn r0, r1   利用r0+r1的结果修改CPSR寄存器的NZCV
				 
			teq  测试相等   eq  ne
						teq r0, #3   利用r0^3的结果修改CPSR寄存器的NZCV
						teq r0, r1   利用r0^r1的结果修改CPSR寄存器的NZCV
			tst 位测试  测试第一操作数中，第二操作数为1的位是0   ne测试的位不全为0  eq表示测试的位全是0
						tst r0, #3   利用r0&3的结果修改CPSR寄存器的NZCV
						tst r0, r1   利用r0&r1的结果修改CPSR寄存器的NZCV
			
			
			地址相关代码:程序运行地址和程序链接地址必须一致
			地址无关代码:程序运行地址和程序链接地址不必一致
				
			ldr r0, =fun   将标号表示的地址传递给r0		
	跳转指令：
			长跳转  ，写pc
			mov  pc , #0xff000000
			ldr  pc, =0x12345678
			ldr pc,  =fun  
	   
	
			短跳转(相对跳转)，基于当前pc前后前后32M跳转（找标号），到标号位置处执行代码
			b fun   只跳转
			bl fun  保存返回的跳转（使用lr保存返回地   mov lr， pc）
			bx  
			
			标号：地址的助记符，标号不占任何空间
			

		load/store  指令完成内存和寄存器数值的交互
		ldr  从内存加载一个字内容到目标寄存器
		str	 保存一个寄存器内容到指定内存空间
		
		ldr r0, fun   将fun标号地址处的内容赋给r0
		
		ldr r0, [r1]   === r0 = *r1
		str r0, [r1]   === *r1 = r0
		
		
		! 表示基地址更新
		前索引
				ldr r1, [r0, #4]   === r1 = *(r0+4)  r0=r0
				
				str r1, [r0, #4]   === *(r0+4)=r1  r0=r0
		后索引
				str r0, [r1], #4  ; *r1=r0  r1=r1+4
				ldr r3, [r1], #4  ;r3=*r1  r1=r1+4
		基址变址索引
				ldr r1, [r0, #4]!   === r1 = *(r0+4)  r0=r0+4
				str r1, [r0, #4]!   === *(r0+4)=r1  r0=r0+4
				
				ldrb/strb 8位操作
				ldrh/strh 16位操作
				ldr/str   32位
				ldrd/strd 64位操作
				
				
				小编号寄存器对应低地址空间
		块拷贝指令： 
				ldm  从内存加载连续多个字内容到多个寄存器
				ldm r0, {r1,r2,r3}  === r1=*r0 r2=*(r0+4) r3=*(r0+8) r0=r0
				stm  保存多个寄存器数值到连续内存空间
				stm r0, {r1,r2,r3}  === *r0=r1 *(r0+4)=r2 *(r0+8)=r3
				
				ldmia/stmia  先内存操作，后地址+4
				ldmib/stmib  先地址+4，后内存操作
				ldmda/stmda  先内存操作，后地址-4
				ldmdb/stmdb  先地址-4，后内存操作
				入栈：stmdb sp!, {r0-r12}
				出栈：ldmia sp!, {r0-r12}
				
				
				满减栈（默认使用）   sp指向的空间不能直接使用，栈的生长方向向下
				满增栈               sp指向的空间不能直接使用，栈的生长方向向上
				空减栈               sp指向的空间可以直接使用，栈的生长方向向下
				空增栈               sp指向的空间可以直接使用，栈的生长方向向上
				
				
				栈操作指令：
						ldmfd/stmfd   满减栈
						ldmfa/stmfa   满增栈
						ldmed/stmed   空减栈
						ldmea/stmea   空增栈
						
						stmfd sp!, {r0-r12}
						ldmfd sp!, {r0-r12}^  ^表示模式恢复
						
						push  {r0-r12}
						pop   {r0-r12}
						
	APCS规则：
			形参传递： 小于4个 r0-r3
								大于4个  前4个使用寄存器r0-r3 其余使用栈
			返回值传递：使用r0
			寄存器命名：
					r0-r3  a1-a4
					r4-r10 v1-v7
					r11  --->fp 
					r12  --->ip 保存sp 
					r13  --->sp
					
		特殊寄存器操作指令：
			cpsr寄存器操作：
				msr cpsr, r0    === 将r0内容写入cpsr
				mrs r0, cpsr    === 读取cpsr数值到r0寄存器
				
		协处理器操作指令：
					cp15协处理器 
					cp15协处理器有16个32位寄存器
					
					mrc p15, 0, r0, c0, c0, 0   将cp15协处理器的c0寄存器数值读取到r0
					mcr p15, 0, r0, c1, c0, 0    将r0数值写入cp15协处理器的c1寄存器
				
				
				
				
				
		
				
				
					


