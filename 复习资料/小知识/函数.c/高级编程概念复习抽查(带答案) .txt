面试需要准备的基础知识：
C基础部分
1. static const extern 作用和常用用法
	const 
	用法1，常量，取代了c中的宏定义，声明的时候必须初始化。
	const限制了常量的使用方式。
	用法2，指针和常量
	使用指针的时候涉及两个对象：该指针本身和它所指向的对象。
	将一个指针声明用const修饰，指向的对象成为常量，而指针不是，
	要修饰指针本身声明为常量，要写成*const；
	
	static：
	用法1：static局部变量，作用域局部范围可以使用，生命周期，程序开始分配，程序结束释放。
	用法2：static 全局变量，作用范围本文件内可以使用，程序开始分配，程序结束释放。
	用法3：static 函数，限定本函数作用范围本文件内可以使用。
	
	extern：
	用法1 ：在一个程序中，一个变量只能定义一次，但可以声明多次。
	在一个文件中定义了一个全局变量，在另一个文件当中依然用使用这个变量，
	就需要使用extern对这个变量进行声明，。
2. int a[5] = {1,2,3,4,5};
   int *pa = a + 1; //*pa的值是什么  2
   int *pa = &a + 1 //*pa的值是什么 不确定
3. 冒泡、插入、选择、快速排序要能手写
4. 头文件中
	#ifdef
	#define 
	#endif
    作用
	防止头文件被多次包含，防止多次定义。
5. 堆和栈的区别 
	进程内存分布中
	 1、栈区（stack）—   由编译器自动分配释放   ，存放函数的参数值，局部变量的值等。其  
  操作方式类似于数据结构中的栈。  
  2、堆区（heap）   —   一般由程序员分配释放，   若程序员不释放，程序结束时可能由OS回  
  收   。
  申请方式不同，栈上的自动分配，自动回收。堆上的手动分配，手动回收。
  申请后系统的响应：
	栈：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。 

	堆：操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，
	寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，
	另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。
	另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。
  申请的大小差异：
   栈：linux下默认8M
   堆：堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。
   效率：
		栈由系统自动分配，速度较快。但程序员是无法控制的。 

		堆是由malloc分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便.
	存储的内容的差异：
	栈： 在函数调用时，第一个进栈的是主函数中后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。注意静态变量是不入栈的。 

	当本次函数调用结束后，局部变量先出栈，然后是参数，最后栈顶指针指向最开始存的地址，也就是主函数中的下一条指令，程序由该点继续运行。 

	堆：一般是在堆的头部用一个字节存放堆的大小。堆中的具体内容有程序员安排。
	
   
  
6. 位操作运算
	&
	按位与运算符"&"是双目运算符。 其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位均为1时，结果位才为1 ，否则为0
	|
	按位或运算符“|”是双目运算符。 其
	功能是参与运算的两数各对应的二进位相或。只要对应的二个二进位有一个为1时，结果位就为1。
	^
	按位异或运算符“^”是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。
	~
	求反运算符～为单目运算符，具有右结合性。 其功能是对参与运算的数的各二进位按位求反。
	<<
	左移运算符“<<”是双目运算符。左移n位就是乘以2的n次方。 其功能把“<<”左边的运算数的各二进位全部左移若干位，由“<<”右边的数指定移动的位数，高位丢弃，低位补0
	>>
	右移运算符“>>”是双目运算符。右移n位就是除以2的n次方

	其功能是把“>>”左边的运算数的各二进位全部右移若干位，“>>”右边的数指定移动的位数。
	
7. 编写一个程序判断大小端
	方式1；
	typedef union {  
	int i;  
	char c;  
	}my_union;  

	int checkSystem1(void)  
	{  
	my_union u;  
	u.i = 1;  
	return (u.i == u.c);  
	}  
	
	方式2；
	int checkSystem2(void)  
	{  
	int i = 0x12345678;  
	char *c = &i;  
	return ((c[0] == 0x78) && (c[1] == 0x56) && (c[2] == 0x34) && (c[3] == 0x12));  
	} 

8. strcpy strncpy strcmp 能手写


	char* strcpy(char* pDest, const char* pSrc)
{
    //要判断空
    if(pDest==NULL || pSrc==NULL)
        return NULL;
    //注意记录
    char* pDestCpy = pDest;
    while((*pDestCpy++ = *pSrc++)!='\0')
        ;
    return pDest;
}

	char* strncpy(char* pDest, const char* pSrc, int size)
{
    if(pDest!=NULL && pSrc!=NULL)
	return NULL;
    if(size>=0) return NULL;
    char* pDestCpy = pDest;
    while(size-- && (*pDestCpy++ = *pSrc++)!='\0') 
        ;
    if(size>0)
        while(size--)
            *pDestCpy++='\0';
    return pDest;
}


	int strcmp(char* pDest, const char* pSrc)
{
    //要判断空
    if(pDest==NULL || pSrc==NULL)
       return NULL;
    //注意记录
    char* pDestCpy = pDest;
	if(strlen(pDest)!=strlen(pSrc))
	return 1;
    while(*pDest!=0 && *pSrc!=0)
	{
		if(*pDest>*pSrc)
		return 1;
		else if(*pDest<*pSrc)
		return -1;
		
		pDest++;
		pSrc++;
		
	}
        
    return 0;
}
9. 字符串逆序函数编写（用递归实现）

char *reverse(char *str)
{
	char *left=str;
	char *right=str+strlen(str)-1;
	char tmp;
	if(*left!='\0')
		{
		tmp=*left;
		*left=*right;
		*right='\0';
		reverse(str+1);
		*right=tmp;
		return str;
		}
	else
		{
		return NULL;
		}
}
   编写 atoi 函数手写
   
int atoi_my(const char *str)  
{  
    int s=0;  
    bool falg=false;  
      
     while(*str==' ')  
     {  
         str++;  
     }  
   
     if(*str=='-'||*str=='+')  
     {  
         if(*str=='-')  
         falg=true;  
         str++;  
     }  
   
     while(*str>='0'&&*str<='9')  
     {  
         s=s*10+*str-'0';  
         str++;  
         if(s<0)  
         {  
             s=2147483647;  
             break;  
         }  
     }  
     return s*(falg?-1:1);  
 }
   

C数据结构
	单链表操作（增删改查）、单链表逆序   看老师给的示例代码
	队列和栈的区别
	①栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。
	②栈就是一个桶，后放进去的先拿出来，它下面本来有的东西要等它出来之后才能出来（先进后出）
	③栈(Stack)是操作系统在建立某个进程时或者线程（在支持多线程的操作系统中是线程）为这个线程建立的存储区域，该区域具有FIFO的特性，在编译的时候可以指定需要的Stack的大小。
	
	
	①队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。
	②队列中没有元素时，称为空队列。
	③建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置。
	④队列采用的FIFO(first in first out)，新元素（等待进入队列的元素）总是被插入到链表的尾部，而读取的时候总是从链表的头部开始读取。每次读取一个元素，释放一个元素。所谓的动态创建，动态释放。因而也不存在溢出等问题。由于链表由结构体间接而成，遍历也方便。（先进先出）
	
	
	二叉树的前中后序遍历、                  给一个二叉树的前、中序遍历推导出后续遍历		
	括号匹配、/* */、<> </>
	算法复杂度的概念（时间复杂度  空间复杂度）冒泡的时间复杂度（n的平方）
	空间复杂度(SpaceComplexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。

	算法的时间复杂度是一个函数，它定量描述了该算法的运行时间。这是一个关于代表算法输入值的字符串的长度的函数。时间复杂度常用大O符号表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是渐近的，它考察当输入值大小趋近无穷时的情况。
	
	一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。
Linux软件开发
2. fopen("r+")可读可写  fopen("r")：只读 区别
	都表示被操作文件必须存在，r+在文件被打开后，同时可以进行读写操作。r在文件打开后，只能进行读的操作。
3. 动态库静态库的区别
	.so    .a 
	
	静态库在程序的链接阶段被复制到了程序中，和程序运行的时候没有关系；动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库的优点是系统只需载入一次动态库，不同的程序可以得到内存中相同的动态库的副本，因此节省了很多内存。
	libc.so.版本号 -lc 
4. Linux进程的状态，状态切换图
	
5. 进程、线程的区别

	通常在一个进程中可以包含若干个线程，它们可以利用进程所拥有的资源。在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位。由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统内多个程序间并发执行的程度
	线程和进程的区别在于，子进程和父进程有不同的代码和数据空间，而多个线程则共享数据空间，每个线程有自己的执行堆栈和程序计数器为其执行上下文。多线程主要是为了节约CPU时间，发挥利用，根据具体情况而定。线程的运行中需要使用计算机的内存资源和CPU。9
	a.地址空间和其它资源：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。
	b.通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信——需要进程同步和互斥手段的辅助，以保证数据的一致性。
	c.调度和切换：线程上下文切换比进程上下文切换要快得多。
	d.在多线程OS中，进程不是一个可执行的实体。
6. 你知道常用的进程间通信方式有哪些？（5个 管道，信号，共享内存，消息队列，信号量）
7. 线程间通信方式，互斥锁、信号量同步与互斥
	互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。　　

	同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。
8. 常用的命令
   free	查看内存的使用情况
   ps	查看系统当前进程状态
   top  查看系统当前CPU，内存等使用率
   ifconfig 查看网卡相关信息
   ping 	网络诊断命令
   netstat	查看当前网络状态
   find 查找本地文件
9. OSI 7层、TCP/IP 4层或者5层模型
	物理层：提供为建立、维护和拆除物理链路所需要的机械的、电气的、功能的和规程的特性；有关的物理链路上传输非结构的位流以及故障检测指示。

	数据链路层：在网络层实体间提供数据发送和接收的功能和过程；提供数据链路的流控。

	网络层：控制分组传送系统的操作、路由选择、拥护控制、网络互连等功能，它的作用是将具体的物理传送对高层透明。

	传输层：提供建立、维护和拆除传送连接的功能；选择网络层提供最合适的服务；在系统之间提供可靠的透明的数据传送，提供端到端的错误恢复和流量控制。

	会话层：提供两进程之间建立、维护和结束会话连接的功能；提供交互会话的管理功能，如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式 。

	表示层：代表应用进程协商数据表示；完成数据转换、格式化和文本压缩。

	应用层：提供OSI用户服务，例如事务处理程序、文件传送协议和网络管理等。
	
	
	
10.RJ45接口标准 ()
11.ETHER V2帧格式 目标MAC 源MAC 类型 数据 校验
   PPP（P2P）
   点对点协议（英语：Point-to-Point 
   Protocol，PPP）工作在数据链路层（以OSI参考模型的观点）。它通常用在两节点间创建直接的连接，并可以提供连接认证、传输加密（使用ECP，RFC 1968）以及压缩。
	PPP被用在许多类型的物理网络中，包括串口线、电话线、中继链接、移动电话、特殊无线电链路以及光纤链路（如SONET）。
	PPP还用在互联网接入连接上（现在称作宽带）。互联网服务提供商（ISP）使用PPP为用户提供到Internet的拨号接入，这是因为IP报文无法在没有数据链路协议的情况下通过调制解调器线路自行传输。PPP的两个派生物PPPoE和PPPoA被ISP广泛用来与用户创建数字用户线路（DSL）Internet服务连接。
   PPPOE 	
   PPPoE（英语：Point-to-Point Protocol Over Ethernet），以太网上的点对点协议，是将点对点协议（PPP）封装在以太网（Ethernet）框架中的一种网络隧道协议。由于协议中集成PPP协议，所以实现出传统以太网不能提供的身份验证、加密以及压缩等功能，也可用于缆线调制解调器（cable modem）和数位用户线路（DSL）等以以太网协议向用户提供接入服务的协议体系。
本质上，它是一个允许在以太网 广播域中的两个以太网接口间创建点对点隧道的协议。
以Linux系统常用的pppd为例，支持PPP接口上面的IP、IPv6和IPX网络层协议。
它使用传统的基于PPP的软件来管理一个不是使用串行线路而是使用类似于以太网的有向分组网络的连接。这种有登陆和口令的标准连接，方便了接入供应商的记费。并且，连接的另一端仅当PPPoE连接接通时才分配IP地址，所以允许IP地址的动态复用。
12.ARP协议作用
地址解析协议 (ARP) 是通过解析网路层地址来找寻数据链路层地址的一个在网络协议包中极其重要的网络传输协议。
ARP是通过网络地址(例：IPv4)来定位MAC地址 (也称为乙太地址) 
13.IP协议帧格式 
14.IP地址的分类 子网掩码的计算
	IP地址由32位二进制数组成，为便于使用，常以XXX.XXX.XXX.XXX形式表现，每组XXX代表小于或等于255的10进制数。例如维基媒体的一个IP地址是208.80.152.2。地址可分为A、B、C、D、E五大类，其中E类属于特殊保留地址。
	IP地址是唯一的。目前IP技术可能使用的IP地址最多可有4,294,967,296个（即232）。骤看可能觉得很难会用尽，但由于早期编码和分配上的问题，使很多区域的编码实际上被空出或不能使用。加上互联网的普及，使大部分家庭都至少有一部计算机，连同公司的计算机，以及连接网络的各种设备都消耗大量IPv4地址资源。
15.ICMP 协议的作用， RIP  OSFP作用
16.TCP UDP的区别，TCP三次握手
17.TCP UDP报文帧格式
18. 常用的应用层协议的端口号
	 1.   POP3 TCP 110
    2.   IMAP TCP 143
    3.   SMTP TCP 25
    4.   Telnet TCP 23
    5.   终端服务 TCP 3389
    6.   PPTP TCP 1723
    7.   HTTP TCP 80
    8.   FTP 控制 TCP 21 FTP 默认数据 TCP 20
    9.   HTTPS TCP 443
    10. NTP UDP 端口 123
    11. RADIUS UDP 1645
    12. DHCP 服务器 UDP 67
    13.    DNS UDP 53,DNS TCP 53
    14.   SNMP UDP 161
    15   ipsec UDP 500
    16 TFTP UDP 端口 69
     17 L2TP UDP 1701
19. HTTP 协议
	请描述从打开浏览器访问
	baidu首页到页面显示的
	整个网络与通信过程原理？

	超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。
	1，浏览器发起连接请求（三次握手）
	2.浏览器发送网页请求
	3.服务器根据网页请求 对应的回复
	4.服务端断开连接

其他面试问题：
1、tcp/ip？
	TCP/IP协议，即Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。		
2、二分法的时间复杂度是多少？
	O(logN)
3、rs232和rs485？
4、回调函数是什么以及它的好处？
	回调函数就是一个通过函数指针调用的函数。如果你把函数的指针(地址)作为参数传递给另一个函数，当这个指针被用为调用它所指向的函数时，我们就说这是回调函数
	因为可以把调用者与被调用者分开。调用者不关心谁是被调用者，所有它需知道的，只是存在一个具有某种特定原型、某些限制条件(如返回值为int)的被调用函数。
（1）可以让实现方，根据回调方的多种形态进行不同的处理和操作。（ASIHttpRequest）

（2）可以让实现方，根据自己的需要定制回调方的不同形态。（UITableView）

（3）可以将耗时的操作隐藏在回调方，不影响实现方其它信息的展示。

（4）让代码的逻辑更加集中，更加易读。
上面的例子展示了回调函数的基本原理和用法，回调函数的应用是非常广泛的。通常，当我们想通过一个统一接口实现不同内容的时候，用回调函数来实现就非常合适。任何时候，如果你所编写的函数必须能够在不同的时刻执行不同的类型的工作或者执行只能由函数调用者定义的工作，你都可以用回调函数来实现。
5、你知道的排序算法？
	冒泡，选择，插入，快排，折半，堆拍，
6、你使用的数据库？
	sqlite3，mysql，mssql。
7、如何wireshark抓包
	启动wireshare，选择网卡，设置过滤条件
8、指针和引用的区别？
	1. 指针是一个实体，而引用仅是个别名；

    2. 引用使用时无需解引用（*），指针需要解引用；

    3. 引用只能在定义时被初始化一次，之后不可变；指针可变；

    引用“从一而终” ^_^

    4. 引用没有 const，指针有 const，const 的指针不可变；

    5. 引用不能为空，指针可以为空；

    6. “sizeof 引用”得到的是所指向的变量（对象）的大小，而“sizeof 指针”得到的是指针本身（所指向的变量或对象的地址）的大小；

    typeid（T） == typeid（T&） 恒为真，sizeof（T） == sizeof（T&） 恒为真，但是当引用作为成员时，其占用空间与指针相同（没找到标准的规定）。

    7. 指针和引用的自增（++）运算意义不一样；
9、memcpy和strcpy区别？
	复制的变量中的内容有差异，strcpy把变量当字符串看，字符串有结束标志\0
	memcpy把变量中的内容当二进制数据对待，所以要求给出长度。
10、sizeof和strlen区别？

	strlen(char*)函数求的是字符串的实际长度，它求得方法是从开始到遇到第一个'\0',如果你只定义没有给它赋初值，这个结果是不定的，它会从aa首地址一直找下去，直到遇到'\0'停止。
	sizeof()返回的是变量声明后所占的内存数，不是实际长度，此外sizeof不是函数，仅仅是一个操作符，strlen是函数。
	1.sizeof操作符的结果类型是size_t，它在头文件中typedef为unsigned　int类型。
	2.sizeof是操作符（关键字），strlen是函数。 
	3.sizeof可以用类型做参数，strlen只能用char*做参数，且必须是以''\0''结尾的。
	4.数组做sizeof的参数不退化，传递给strlen就退化为指针了。
	5.大部分编译程序 在编译的时候就把sizeof计算过了是类型或是变量的长度这就是sizeof(x)可以用来定义数组维数的原因
	6.strlen的结果要在运行的时候才能计算出来，是用来计算字符串的长度，不是类型占内存的大小。
	7.sizeof后如果是类型必须加括弧，如果是变量名可以不加括弧。这是因为sizeof是个操作符不是个函数
	8.当适用了于一个结构类型时或变量， sizeof 返回实际的大小，当适用一静态地空间数组， sizeof 归还全部数组的尺寸。
突击考核：（验证自己的复习效果）

1. 手写快速排序 
2. 什么是二分查找，手写
3. 手写 strcmp 
4. #include <file.h> 与  #include "file.h" 区别是什么
	<>搜索系统目录下的头文件路径
	“”搜索系统目录，页搜索项目的头文件目录
5. #error 是什么意思
	#error命令是C/C++语言的预处理命令之一，当预处理器预处理到#error命令时将停止编译并输出用户自定义的错误消息
6. 
	struct A {char a; int b;);
	struct B {int a; int b;};
	能否使用 memcmp 比较两种类型的变量是否相等
	不能，两者内存分配图不一样
7. 什么是大小端，写出判断大小端的程序 
	大端模式，是指数据的高位，保存在内存的低地址中，而数据的低位，保存在内存的高地址中，这样的存储模式类似于把数据当作字符串顺序处理。地址由小向大增加，而数据从高位往低位放；小端模式，是指数据的高位保存在内存的高地址中，而数据的低位保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低，和我们的逻辑方法一致。
8. struct A { unsigned int a:4; unsigned int b:4}; 是什么意思 
	位域，A占4字节，a占4个bit位，b在4个bit位
9. 如何将一个变量的 bit3 位置1 
	a|=0x1000；
10. 判断一个数中有多少个1
	void totalOne(int x)
	{
	int count = 0;
	while(x)
	{
	x = x & ( x - 1 );
	count++;
	}
	printf("count = %d/n", count);
	}
11. 手写出 atoi 函数 


高级编程：

进程线程的区别？
	你知道哪几种线程间通信方式？ 临界资源是什么，什么是临界区？
	同步，互斥。在多线程中，多个线程需要对同一个资源（一般全部变量）需要进行读写的操作。这个资源是一个临界资源。在对临界资源进行操作的代码区域，是临界区。 

什么是可重入函数？
	可重入函数主要用于多任务环境中，一个可重入的函数简单来说就是可以被中断的函数，也就是说，可以在这个函数执行的任何时刻中断它，转入OS调度下去执行另外一段代码，而返回控制时不会出现什么错误；而不可重入的函数由于使用了一些系统资源，比如全局变量区，中断向量表等，所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。
什么是死锁，如何避免死锁？
	在多任务系统下，当一个或多个进程等待系统资源，而资源又被进程本身或其它进程占用时，就形成了死锁。由于资源占用是互斥的，当某个进程提出申请资源后，使得有关进程在无外力协助下，永远分配不到必需的资源而无法继续运行，这就产生了一种特殊现象。
	1、撤消陷于死锁的全部进程；

	2、逐个撤消陷于死锁的进程，直到死锁不存在；

	3、从陷于死锁的进程中逐个强迫放弃所占用的资源，直至死锁消失。

	4、从另外一些进程那里强行剥夺足够数量的资源分配给死锁进程，以解除死锁状态
	
OSI七层模型和TCP/IP 四层模型是什么？
能够默写出 TCP SERVER端的程序模型，以及简单的TCP SERVER程序

数据结构：
能否默写出单链表 插入
能否默写出双向循环链表插入

C++:
c++中的 class 和 struct 区别是什么？ 
c++中类的六个默认的成员函数，列举其中四个
什么是函数重载？
什么是多态？
什么是类的静态成员变量？
实现一个 String 类，实现基本的构造函数、拷贝构造函数、析构函数、= 运算符重载
你知道单例模式？

模拟电路：
集成运算放大器是使用？

ARM:
RS232，RS485区别？

/*由于RS232接口标准出现较早，难免有不足之处，主要有以下四点：

　　(1) 接口的信号电平值较高，易损坏接口电路的芯片，又因为与TTL 电平不兼容故需使用电平转换电路方能与TTL电路连接。
　　(2) 传输速率较低，在异步传输时，波特率为20Kbps。 
　　(3) 接口使用一根信号线和一根信号返回线而构成共地的传输形式，容易产生共模干扰，所以抗噪声干扰性弱。
　　(4) 传输距离有限，最大传输距离标准值为50英尺，实际上也只能用在50米左右。

　　针对RS232接口的不足，于是就不断出现了一些新的接口标准，RS-485就是其中之一，它具有以下特点：

　　(1) RS-485的电气特性：逻辑“1”以两线间的电压差为+(2-6) V表示；逻辑“0”以两线间的电压差为-(2-6)V表示。接口信号电平比RS-232降低了，就不易损坏接口电路的芯片，且该电平与TTL电平兼容，可方便与TTL 电路连接。
　　(2) RS-485的数据最高传输速率为10Mbps 。 
　　(3) RS-485接口是采用平衡驱动器和差分接收器的组合，抗共模干能力增强，即抗噪声干扰性好。
　　(4) RS-485接口的最大传输距离标准值为4000英尺，实际上可达3000米，另外RS-232接口在总线上只允许连接1个收发器，即单站能力。而RS-485接口在总线上是允许连接多达128个收发器。即具有多站能力,这样用户可以利用单一的RS-485接口方便地建立起设备网络。
　　因为RS485接口组成的半双工网络，一般只需二根连线(我们一般叫AB线)，所以RS485接口均采用屏蔽双绞线传输。 
　　由于有的设备是232接口的，有的是485接口的，如果有一台232接口的设备与一台485接口的设备通信，那就需要一个RS232/RS485转换器，把232接口的设备的232信号转换成485信号，然后再与485接口的设备通信。如果是两台232接口的设备要进行远距离的通信，那只要加上两个RS232/RS485转换电路就可以了。
市场上所谓的“无源RS232/RS485转换器”采用从计算机串口偷电技术，而“有源RS232/RS485转换器”在电路原理图与跟前者差不多，只是电源部分有所改动而已。*/



内核：
kmalloc vmalloc区别？
内核双向链表的使用
你知道什么是中断底半部吗？
内核和用户空间数据交互的方式有哪些？

软件功能（额外需要留意）
什么是敏捷开发、瀑布开发
软件测试应该在项目的哪个阶段介入项目

	





   


	
	
	
	





