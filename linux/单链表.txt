1.查找单链表的第K个节点
	1.首先遍历一遍链表，获得链表长度n，那倒数第k个节点就是正数第n-k个节点
		缺点：这个解法需要遍历两次链表
	2.假设k = 2；首先，我们先让一个指针p1指向链表的头节点head，然后走k步，现在的p1只要走n-k步就能走到链表末尾的空指针
  		     然后，再用一个指针p2指向链表头节点head，
		     接下来，p1和p2同时往前走，当p1走到链表末尾的空指针时走了n-k步，p2也走了n-k步，也就恰好到了链表的倒数第k个节点
		listnode findfromend(listnode head, int k)
		{
			listnode p1 = head;
			for(int i = 0; i < k ; ++i)
			{
				p1 = p1.next;
			}
			listnode p2 = head;
			while(p1 ！= NULL)
			{
				p1 = p1.next;
				p2 = p2.next;
			}
			return p2;
		}
2.找单链表的中间结点
	使用快慢指针，每当slow指针前进一步，fast指针前进两步，当fast指针指向链表末尾时，slow指针就指向了链表的中点
	注意，当链表有偶数个节点，这里返回的是后面那个结点
	listnode middleNoed(listnode head)
	{
		assert(head != NULL);
		listnode slow = head, fast = head;
		while(fast != NULL && fast.next != NULL)
		{
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
3.判断链表是否有环
	思路：使用快慢指针，每当slow指针前进一步，fast指针前进两步，当fast指针最终遇到空指针时，说明链表没有环，当fast指针和slow指针相遇，说明fast指针肯定超过了slow指针一圈，即链表有环
	bool middleNoed(listnode head)
	{
		assert(head != NULL);
		listnode slow = head, fast = head;
		while(fast != NULL && fast.next != NULL)
		{
			slow = slow.next;
			fast = fast.next.next;
			if(slow == fast)
				return true;
		}
		return false;
	}
4.如果链表中含有环，计算环的起点
	当快慢指针相遇时，让其中一个指针指向，让其中一个指针指向头节点，然后让他两以相同速度前进，再次相遇时所在的节点位置就是环开始的位置	
	listnode detectcycle(listnode head)
	{
		assert(head != NULL);
		listnode slow = head, fast = head;
		while(fast != NULL && fast.next != NULL)
		{
			slow = slow.next;
			fast = fast.next.next;
			if(slow == fast)
				break;
		}
		if(fast != NULL && fast.next != NULL)
			return NULL;     //没有环
		
		slow = head;
		while(slow != fast)
		{	
			slow = slow.next;
			fast = fast.next;
		}
		return slow;
	}
5.判断两个链表是否相交
	A : a1->a2->c1->c2;
	B：b1->b2->b3->c1->c2;
	思路：让p1遍历完A链表之后开始遍历链表B，让p2遍历完链表B后开始遍历A，这样相当于逻辑上两条链表接在了一起
		A : a1->a2->c1->c2->b1->b2->b3->c1;
		B：b1->b2->b3->c1->c2->a1->a2->c1;
	listnode getIntersectionNode(listnode headA, listnode headB)
	{
		listnode p1 = headA, p2 = headB;
		while(p1 != p2)
		{
			if(p1 == NULL)
				p1 = headB;
			else
				p1 = p1.next;
			if(p2 == NULL)
				p2 = headA;
			else
				p2 = p2.next;
		}
		retrurn p1;
	}
6.反转链表
	递归
	listnode reverse(listnode head)   
	{
		if(head == NULL)
			return NULL;      //链表不存在
		if(head.next == NULL)
			return head;        //链表只有一个节点，不反转
		listnode newnode= reverse(head.next);
		head.next.next = head;
		head.next = null;
		return newnode;
	}
	迭代：
	listnode *reverse(listnode head)
	{
		if(head == NULL || head.next == NULL)
			return head;
		listnode temp = head;
		listnode cur = head, prev  = NULL;
		while(cur != NULL)
		{
			temp = cur.next;
			cur.next = pre;
			pre = cur;
			cur = temp;
		}
		return pre;
	}
	
7.反转链表前n个节点
	
8.反转链表的一部分
	输入：1->2->3->4->5->NULL m=2,n=4
	输出：1->4->3->2->5->NULL
	ListNode reverseBetween(ListNode head,int m, int n)
	{
		if(m == n)   return head;
		ListNode dummy = new ListNode(-1);    //dumm的next永远指向新链表的第一个节点
		dummy.next = head;

		ListNode pre = dummy;     //第一段的最后一个节点，分为3段，m之前，m和n之间，n之后
		ListNode m_node = head;    //第二段的第一个节点
		ListNode n_node = head;	//第二段的最后一个节点

		for(int i = 1; i < m; ++i){
			pre = pre.next; 
			m_node = m_node.next; 
		}   
		for(int i = 1; i < n; ++i)
			n_node = n_node.next;

		
		while(m_node != n_node)
		{
			pre.next = m_node.next;
			m_node.next = n_node.next;
			n_node.next = m_node;
			m_node=pre.next;
		}
		return dummy.next;
	}
9.k个一组反转单链表逆序：
	listnode *reverse(listnode a, listnode b)
	{
		listnode cur = a, prev  = NULL, temp = a;
		while(cur != b)
		{
			temp = cur.next;
			cur.next = pre;
			pre = cur;
			cur = temp;
		}
		return pre;
	}
	listnode reverseKgroup(listnide head,int k)
	{
		if(head == NULL ) return NULL;
		listnode a, b;
		a = b = head;           
		for(int i = 0; i < k; ++i)
		{
			if(b == NULL) return head;    //不足k个，不需要反转
			b = b.next;
		}
		listnode newhead = reverse(a,b);
		a.next = reverseKgroup(b,k);
		return newHead;
	}

10.判断回文链表
	方法一：把原始链表反转存入一条新的链表，然后比较这两条链表是否相同   ，空间复杂度高
	方法二：
		1.通过快慢指针找到链表的中点
			奇数：1->2->3->2->1   slow= 3，fast=1
			偶数：1->2->2->1      slow=第二个2，fast = NULL
		2.若fast没有指向空，说明链表长度为奇数，slow在往前一步
			奇数：1->2->3->2->1   slow= slow.next=2，fast=1
		3.从slow开始反转后面的链表
			left = head;
			right = reverse(slow);
			奇数：1->2->3->2<-1   left= 1，right=1
				             |
				          NULL
			偶数：1->2->2->1      left= 1，right=1
				       |
				    NULL
	bool func(listnide head)
	{
		listnode slow = head, fast = head;
		while(fast != NULL && fast.next != NULL)
		{
			slow = slow.next;
			fast = fast.next.next;
		}
		if(fast != NULL)
			slow = slow.next;
		listnode left = head,;
		listnode right = reverse(slow);
		while(right != NULL)
		{
			if(left.val != right.val)
				return false;
			left = left.next;
			right = right.next;
		}
		return true;
	}
11.单链表冒泡排序
	Node bubble_Sort(Node head)
	{
		if(head == null || head.next  == null)
			retrun null;

		//Node pdummy = (Node *)malloc(sizeof(Node));   pdummy->val = -1;pdummy->next = head; 
		Node dummy = new Node(-1);
		dummy.next = head; 

		Node cur = dummy.next;    //要比较的当前节点
		Node ter = null;   //终止标记
		Node p=dummy;
		while(cur != ter)
		{
			while(cur.next != ter)
			{
				if(cur.val < cur.next.val)
				{
					p = cur;
					cur = cur.next;
				}
				else                                       //交换节点，而不是节点中的数据
				{
					Node temp = cur.next;   
					cur.next = cur.next.next;
					temp.next = cur;
					p.next = temp;
					p = temp;
				}
			}
			ter = cur;
			p = dummy;
			cur = dummy.next;
		}
		return dummy.next;
	}
12.给定字符串，入栈，求所有可能的出栈顺序
	比如abc依次进栈，可能的出栈序列：abc、acd、bac、bca（push push pop push pop pop）、cba、   cab不能出现



联发科：
1.位对齐
2.颠倒二进制位
	unsigned int reverse_bit(unsigned int n)
	{
		unsigned int res = 0;
		int i = 0;
		for(i = 0; i < 32; ++i)
		{
			res<<1;
			if(n & (1<<i))
				res += 1;
		}
		return res;
	}
	main()
	{
		unsigned int num;
		scanf("0x%x",&num);
		unsigned int ret = reverse_bit(num);
		printf("%08x", res);
	}